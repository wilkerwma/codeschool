# -*- coding: utf-8 -*-
# Generated by Django 1.9.7 on 2016-06-19 01:17
from __future__ import unicode_literals

import codeschool.blocks.ace
import codeschool.models.mixins
import codeschool.models.wagtail
import cs_core.models.activity.activity_base
import cs_core.models.activity.grading_method
import cs_core.models.sysmodels
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import easy_thumbnails.fields
import jsonfield.fields
import model_utils.fields
import modelcluster.fields
import userena.models
import wagtail.wagtailcore.blocks
import wagtail.wagtailcore.fields
import wagtail.wagtaildocs.blocks
import wagtail.wagtailembeds.blocks
import wagtail.wagtailimages.blocks
import wagtail.wagtailsnippets.blocks
import wagtailmarkdown.blocks


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
        ('wagtailcore', '0028_merge'),
    ]

    operations = [
        migrations.CreateModel(
            name='CalendarPage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='calendarpage_instance', serialize=False, to='wagtailcore.Page')),
                ('content_color', models.CharField(default='#10A2A4', help_text='Personalize the main color for page content.', max_length=20, verbose_name='color')),
            ],
            options={
                'abstract': False,
            },
            bases=(codeschool.models.wagtail.CodeschoolPageMixin, codeschool.models.mixins.MigrateMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='CodeCarouselActivity',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='codecarouselactivity_instance', serialize=False, to='wagtailcore.Page')),
                ('content_color', models.CharField(default='#10A2A4', help_text='Personalize the main color for page content.', max_length=20, verbose_name='color')),
                ('short_description', models.CharField(blank=True, help_text='A very brief one-phrase description used in listings.', max_length=140, verbose_name='short description')),
                ('icon_src', models.CharField(blank=True, help_text='Optional icon name that can be used to personalize the activity. Material icons are available by using the "material:" namespace as in "material:menu".', max_length=50, verbose_name='activity icon')),
                ('resources', wagtail.wagtailcore.fields.StreamField((('paragraph', wagtail.wagtailcore.blocks.RichTextBlock()), ('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('embed', wagtail.wagtailembeds.blocks.EmbedBlock()), ('markdown', wagtailmarkdown.blocks.MarkdownBlock()), ('url', wagtail.wagtailcore.blocks.URLBlock()), ('text', wagtail.wagtailcore.blocks.TextBlock()), ('char', wagtail.wagtailcore.blocks.CharBlock()), ('ace', codeschool.blocks.ace.AceBlock()), ('bool', wagtail.wagtailcore.blocks.BooleanBlock()), ('doc', wagtail.wagtaildocs.blocks.DocumentChooserBlock()), ('snippet', wagtail.wagtailsnippets.blocks.SnippetChooserBlock(cs_core.models.activity.grading_method.GradingMethod)), ('date', wagtail.wagtailcore.blocks.DateBlock()), ('time', wagtail.wagtailcore.blocks.TimeBlock()), ('stream', wagtail.wagtailcore.blocks.StreamBlock((('page', wagtail.wagtailcore.blocks.PageChooserBlock()), ('html', wagtail.wagtailcore.blocks.RawHTMLBlock()))))))),
            ],
            options={
                'verbose_name_plural': 'synchronized code activities',
                'verbose_name': 'synchronized code activity',
            },
            bases=(codeschool.models.mixins.CopyMixin, codeschool.models.wagtail.CodeschoolPageMixin, codeschool.models.mixins.MigrateMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='CodeCarouselItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('text', models.TextField()),
                ('timestamp', models.DateTimeField(auto_now=True)),
                ('activity', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='items', to='cs_core.CodeCarouselActivity')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ContentActivity',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='contentactivity_instance', serialize=False, to='wagtailcore.Page')),
                ('content_color', models.CharField(default='#10A2A4', help_text='Personalize the main color for page content.', max_length=20, verbose_name='color')),
                ('short_description', models.CharField(blank=True, help_text='A very brief one-phrase description used in listings.', max_length=140, verbose_name='short description')),
                ('icon_src', models.CharField(blank=True, help_text='Optional icon name that can be used to personalize the activity. Material icons are available by using the "material:" namespace as in "material:menu".', max_length=50, verbose_name='activity icon')),
                ('resources', wagtail.wagtailcore.fields.StreamField((('paragraph', wagtail.wagtailcore.blocks.RichTextBlock()), ('image', wagtail.wagtailimages.blocks.ImageChooserBlock()), ('embed', wagtail.wagtailembeds.blocks.EmbedBlock()), ('markdown', wagtailmarkdown.blocks.MarkdownBlock()), ('url', wagtail.wagtailcore.blocks.URLBlock()), ('text', wagtail.wagtailcore.blocks.TextBlock()), ('char', wagtail.wagtailcore.blocks.CharBlock()), ('ace', codeschool.blocks.ace.AceBlock()), ('bool', wagtail.wagtailcore.blocks.BooleanBlock()), ('doc', wagtail.wagtaildocs.blocks.DocumentChooserBlock()), ('snippet', wagtail.wagtailsnippets.blocks.SnippetChooserBlock(cs_core.models.activity.grading_method.GradingMethod)), ('date', wagtail.wagtailcore.blocks.DateBlock()), ('time', wagtail.wagtailcore.blocks.TimeBlock()), ('stream', wagtail.wagtailcore.blocks.StreamBlock((('page', wagtail.wagtailcore.blocks.PageChooserBlock()), ('html', wagtail.wagtailcore.blocks.RawHTMLBlock()))))))),
                ('body', wagtail.wagtailcore.fields.StreamField(())),
            ],
            options={
                'verbose_name_plural': 'content activities',
                'verbose_name': 'content activity',
            },
            bases=(codeschool.models.mixins.CopyMixin, codeschool.models.wagtail.CodeschoolPageMixin, codeschool.models.mixins.MigrateMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='Course',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='course_instance', serialize=False, to='wagtailcore.Page')),
                ('content_color', models.CharField(default='#10A2A4', help_text='Personalize the main color for page content.', max_length=20, verbose_name='color')),
                ('weekly_lessons', models.BooleanField(default=False, help_text='If true, the lesson spans a whole week. Othewise, each lesson would correspond to a single day/time slot.', verbose_name='weekly lessons')),
                ('accept_subscriptions', models.BooleanField(default=True, help_text='Set it to false to prevent new student subscriptions.', verbose_name='accept subscriptions')),
                ('is_public', models.BooleanField(default=False, help_text='If true, all students will be able to see the contents of the course. Most activities will not be available to non-subscribed students.', verbose_name='is it public?')),
                ('subscription_passphrase', models.CharField(blank=True, help_text='A passphrase/word that students must enter to subscribe in the course. Leave empty if no passphrase should be necessary.', max_length=140, verbose_name='subscription passphrase')),
                ('staff', models.ManyToManyField(blank=True, related_name='courses_as_staff_p', to=settings.AUTH_USER_MODEL)),
                ('students', models.ManyToManyField(blank=True, related_name='courses_as_student', to=settings.AUTH_USER_MODEL)),
                ('teachers', models.ManyToManyField(blank=True, related_name='courses_as_teacher', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'parent_init_attribute': 'discipline',
            },
            bases=(codeschool.models.wagtail.CodeschoolPageMixin, codeschool.models.mixins.MigrateMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='Discipline',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='discipline_instance', serialize=False, to='wagtailcore.Page')),
                ('content_color', models.CharField(default='#10A2A4', help_text='Personalize the main color for page content.', max_length=20, verbose_name='color')),
                ('short_description', models.CharField(blank=True, help_text='A very brief one-phrase description used in listings.', max_length=140, verbose_name='short description')),
                ('body', wagtail.wagtailcore.fields.RichTextField(blank=True, help_text='A detailed explanation.', verbose_name='long description')),
            ],
            options={
                'parent_init_attribute': 'faculty',
            },
            bases=(codeschool.models.wagtail.CodeschoolPageMixin, codeschool.models.mixins.MigrateMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='ExpectedUsername',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=100)),
                ('listener_id', models.IntegerField(blank=True, null=True)),
                ('listener_action', models.CharField(blank=True, max_length=30)),
                ('listener_type', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
        ),
        migrations.CreateModel(
            name='Faculty',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='faculty_instance', serialize=False, to='wagtailcore.Page')),
                ('content_color', models.CharField(default='#10A2A4', help_text='Personalize the main color for page content.', max_length=20, verbose_name='color')),
                ('short_description', models.CharField(blank=True, help_text='A very brief one-phrase description used in listings.', max_length=140, verbose_name='short description')),
                ('body', wagtail.wagtailcore.fields.RichTextField(blank=True, help_text='A detailed explanation.', verbose_name='long description')),
                ('location_coords', models.CharField(blank=True, help_text='Latitude and longitude coordinates for the faculty building. The coordinates are selected from a Google Maps widget.', max_length=255, null=True, verbose_name='coordinates')),
            ],
            options={
                'abstract': False,
            },
            bases=(codeschool.models.wagtail.CodeschoolPageMixin, codeschool.models.mixins.MigrateMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='FileFormat',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('ref', models.CharField(max_length=10, unique=True)),
                ('name', models.CharField(max_length=140)),
                ('comments', models.TextField(blank=True)),
                ('is_binary', models.BooleanField(default=False)),
                ('is_language', models.BooleanField(default=False)),
                ('is_supported', models.BooleanField(default=False)),
            ],
        ),
        migrations.CreateModel(
            name='FormField',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('label', models.CharField(help_text='The label of the form field', max_length=255, verbose_name='label')),
                ('field_type', models.CharField(choices=[('singleline', 'Single line text'), ('multiline', 'Multi-line text'), ('email', 'Email'), ('number', 'Number'), ('url', 'URL'), ('checkbox', 'Checkbox'), ('checkboxes', 'Checkboxes'), ('dropdown', 'Drop down'), ('radio', 'Radio buttons'), ('date', 'Date'), ('datetime', 'Date/time')], max_length=16, verbose_name='field type')),
                ('required', models.BooleanField(default=True, verbose_name='required')),
                ('choices', models.CharField(blank=True, help_text='Comma separated list of choices. Only applicable in checkboxes, radio and dropdown.', max_length=512, verbose_name='choices')),
                ('default_value', models.CharField(blank=True, help_text='Default value. Comma separated values supported for checkboxes.', max_length=255, verbose_name='default value')),
                ('help_text', models.CharField(blank=True, max_length=255, verbose_name='help text')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='FormPage',
            fields=[
                ('page_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='wagtailcore.Page')),
                ('to_address', models.CharField(blank=True, help_text='Optional - form submissions will be emailed to this address', max_length=255, verbose_name='to address')),
                ('from_address', models.CharField(blank=True, max_length=255, verbose_name='from address')),
                ('subject', models.CharField(blank=True, max_length=255, verbose_name='subject')),
                ('intro', wagtail.wagtailcore.fields.RichTextField(blank=True)),
                ('thank_you_text', wagtail.wagtailcore.fields.RichTextField(blank=True)),
            ],
            options={
                'abstract': False,
            },
            bases=('wagtailcore.page',),
        ),
        migrations.CreateModel(
            name='FriendshipStatus',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', model_utils.fields.StatusField(choices=[('pending', 'pending'), ('friend', 'friend'), ('unfriend', 'unfriend'), ('colleague', 'colleague')], default='pending', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('other', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_users_as_other', to=settings.AUTH_USER_MODEL)),
                ('owner', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='related_users', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GradableDefinition',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='GradableList',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='gradablelist_instance', serialize=False, to='wagtailcore.Page')),
                ('content_color', models.CharField(default='#10A2A4', help_text='Personalize the main color for page content.', max_length=20, verbose_name='color')),
            ],
            options={
                'abstract': False,
            },
            bases=(codeschool.models.wagtail.CodeschoolPageMixin, codeschool.models.mixins.MigrateMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='Gradebook',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='gradebook_instance', serialize=False, to='wagtailcore.Page')),
                ('content_color', models.CharField(default='#10A2A4', help_text='Personalize the main color for page content.', max_length=20, verbose_name='color')),
                ('course', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='cs_core.Course')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, to=settings.AUTH_USER_MODEL, verbose_name='Student name')),
            ],
            options={
                'abstract': False,
            },
            bases=(codeschool.models.wagtail.CodeschoolPageMixin, codeschool.models.mixins.MigrateMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='GradingMethod',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('description', models.TextField(blank=True)),
                ('family', models.CharField(blank=True, max_length=20)),
                ('data', models.TextField()),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='private_grading_methods', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Lesson',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('sort_order', models.IntegerField(blank=True, editable=False, null=True)),
                ('title', models.TextField(help_text='A brief description for the lesson.', verbose_name='title')),
                ('date', models.DateField(blank=True, help_text='Date scheduled for this lesson.', null=True, verbose_name='date')),
                ('calendar', modelcluster.fields.ParentalKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lessons', to='cs_core.CalendarPage')),
            ],
            options={
                'ordering': ['sort_order'],
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='LessonPage',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='lessonpage_instance', serialize=False, to='wagtailcore.Page')),
                ('content_color', models.CharField(default='#10A2A4', help_text='Personalize the main color for page content.', max_length=20, verbose_name='color')),
                ('body', wagtail.wagtailcore.fields.StreamField((('paragraph', wagtail.wagtailcore.blocks.RichTextBlock()),), blank=True, null=True)),
            ],
            options={
                'verbose_name_plural': 'Lessons',
                'verbose_name': 'Lesson',
            },
            bases=(codeschool.models.wagtail.CodeschoolPageMixin, codeschool.models.mixins.MigrateMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='LoginSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username_as_school_id', models.BooleanField(default=False, help_text='If true, force the username be equal to the school id for all student accounts.')),
                ('school_id_regex', models.TextField(blank=True, default='', help_text='A regular expression for matching valid school ids. If blank, nocheck will be performed on the validity of the given school ids')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Profile',
            fields=[
                ('page_ptr', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, related_name='profile_instance', serialize=False, to='wagtailcore.Page')),
                ('content_color', models.CharField(default='#10A2A4', help_text='Personalize the main color for page content.', max_length=20, verbose_name='color')),
                ('mugshot', easy_thumbnails.fields.ThumbnailerImageField(blank=True, help_text='A personal image displayed in your profile.', upload_to=userena.models.upload_to_mugshot, verbose_name='mugshot')),
                ('privacy', models.CharField(choices=[('open', 'Open'), ('registered', 'Registered'), ('closed', 'Closed')], default='registered', help_text='Designates who can view your profile.', max_length=15, verbose_name='privacy')),
                ('school_id', models.CharField(blank=True, help_text='Identification number in your school issued id card.', max_length=50, null=True, verbose_name='school id')),
                ('nickname', models.CharField(blank=True, max_length=50, null=True)),
                ('phone', models.CharField(blank=True, max_length=20, null=True)),
                ('gender', models.SmallIntegerField(blank=True, choices=[(0, 'male'), (1, 'female')], null=True, verbose_name='gender')),
                ('date_of_birth', models.DateField(blank=True, null=True, verbose_name='date of birth')),
                ('website', models.URLField(blank=True, null=True)),
                ('about_me', wagtail.wagtailcore.fields.RichTextField(blank=True, null=True)),
                ('user', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='_profile', to=settings.AUTH_USER_MODEL, verbose_name='user')),
            ],
            options={
                'permissions': (('student', "Can access/modify data visible to student's"), ('teacher', "Can access/modify data visible only to Teacher's")),
            },
            bases=(codeschool.models.wagtail.CodeschoolPageMixin, codeschool.models.mixins.MigrateMixin, 'wagtailcore.page', models.Model),
        ),
        migrations.CreateModel(
            name='Response',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('final_grade', models.DecimalField(blank=True, decimal_places=3, help_text='Final grade given to activity considering all responses, penalties, etc.', max_digits=6, null=True, verbose_name='Final grade')),
            ],
            options={
                'verbose_name_plural': 'final responses',
                'verbose_name': 'final response',
            },
            bases=(codeschool.models.mixins.CopyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='ResponseContext',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('context_data', jsonfield.fields.JSONField(default=dict)),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='ResponseItem',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', model_utils.fields.AutoCreatedField(default=django.utils.timezone.now, editable=False, verbose_name='created')),
                ('modified', model_utils.fields.AutoLastModifiedField(default=django.utils.timezone.now, editable=False, verbose_name='modified')),
                ('status', model_utils.fields.StatusField(choices=[('pending', 'pending'), ('incomplete', 'incomplete'), ('waiting', 'waiting'), ('invalid', 'invalid'), ('done', 'done')], default='pending', max_length=100, no_check_for_status=True, verbose_name='status')),
                ('status_changed', model_utils.fields.MonitorField(default=django.utils.timezone.now, monitor='status', verbose_name='status changed')),
                ('feedback_data', jsonfield.fields.JSONField(default=dict, null=True)),
                ('response_data', jsonfield.fields.JSONField(default=dict, null=True)),
                ('given_grade', models.DecimalField(blank=True, decimal_places=3, help_text='This grade is given by the auto-grader and represents the grade for the response before accounting for any bonuses or penalties.', max_digits=6, null=True, verbose_name='Percentage of maximum grade')),
                ('final_grade', models.DecimalField(blank=True, decimal_places=3, help_text="Similar to given_grade, but can account for additional factors such as delay penalties or for any other reason the teacher may want to override the student's grade.", max_digits=6, null=True, verbose_name='Final grade')),
                ('manual_override', models.BooleanField(default=False)),
                ('parent', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='children', to='cs_core.ResponseItem')),
                ('polymorphic_ctype', models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_cs_core.responseitem_set+', to='contenttypes.ContentType')),
                ('response', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, to='cs_core.Response', verbose_name='response')),
            ],
            options={
                'verbose_name_plural': 'responses',
                'verbose_name': 'response',
            },
            bases=(codeschool.models.mixins.CopyMixin, models.Model),
        ),
        migrations.CreateModel(
            name='SocialPresenceSettings',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('facebook', models.URLField(help_text='Your Facebook page URL')),
                ('instagram', models.CharField(help_text='Your Instagram username, without the @', max_length=255)),
                ('trip_advisor', models.URLField(help_text='Your Trip Advisor page URL')),
                ('youtube', models.URLField(help_text='Your YouTube channel or user account URL')),
                ('site', models.OneToOneField(editable=False, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Site')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='TimeSlot',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('weekday', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')], help_text='Day of the week in which this class takes place.', verbose_name='weekday')),
                ('start', models.TimeField(blank=True, help_text='The time in which the class starts.', null=True, verbose_name='start')),
                ('end', models.TimeField(blank=True, help_text='The time in which the class ends.', null=True, verbose_name='ends')),
                ('room', models.CharField(blank=True, help_text='Name for the room in which this class takes place.', max_length=100, verbose_name='classroom')),
                ('course', modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='time_slots', to='cs_core.Course')),
            ],
            options={
                'ordering': ('weekday', 'start'),
            },
        ),
        migrations.CreateModel(
            name='CodeschoolProxyPage',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=(codeschool.models.wagtail.CodeschoolPageMixin, codeschool.models.mixins.MigrateMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='HiddenRoot',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=(cs_core.models.sysmodels.LockedModelMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='ProfileRoot',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=(cs_core.models.sysmodels.LockedModelMixin, 'wagtailcore.page'),
        ),
        migrations.CreateModel(
            name='RogueRoot',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=(cs_core.models.sysmodels.LockedModelMixin, 'wagtailcore.page'),
        ),
        migrations.AddField(
            model_name='responsecontext',
            name='parent',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='wagtailcore.Page'),
        ),
        migrations.AddField(
            model_name='responsecontext',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_cs_core.responsecontext_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='response',
            name='activity',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to='wagtailcore.Page'),
        ),
        migrations.AddField(
            model_name='response',
            name='context',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='cs_core.ResponseContext'),
        ),
        migrations.AddField(
            model_name='response',
            name='polymorphic_ctype',
            field=models.ForeignKey(editable=False, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='polymorphic_cs_core.response_set+', to='contenttypes.ContentType'),
        ),
        migrations.AddField(
            model_name='response',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='responses', to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='lesson',
            name='page',
            field=models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, related_name='lesson', to='cs_core.LessonPage'),
        ),
        migrations.AddField(
            model_name='gradabledefinition',
            name='course',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, to='cs_core.GradableList'),
        ),
        migrations.AddField(
            model_name='formfield',
            name='page',
            field=modelcluster.fields.ParentalKey(on_delete=django.db.models.deletion.CASCADE, related_name='form_fields', to='cs_core.FormPage'),
        ),
        migrations.AddField(
            model_name='contentactivity',
            name='grading_method',
            field=models.ForeignKey(blank=True, default=cs_core.models.activity.response_context.grading_method_best, help_text='Choose the strategy for grading this activity.', on_delete=django.db.models.deletion.SET_DEFAULT, to='cs_core.GradingMethod'),
        ),
        migrations.AddField(
            model_name='codecarouselactivity',
            name='grading_method',
            field=models.ForeignKey(blank=True, default=cs_core.models.activity.response_context.grading_method_best, help_text='Choose the strategy for grading this activity.', on_delete=django.db.models.deletion.SET_DEFAULT, to='cs_core.GradingMethod'),
        ),
        migrations.CreateModel(
            name='LessonPageProxy',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('cs_core.lessonpage',),
        ),
        migrations.CreateModel(
            name='ProgrammingLanguage',
            fields=[
            ],
            options={
                'proxy': True,
            },
            bases=('cs_core.fileformat',),
        ),
        migrations.AlterUniqueTogether(
            name='response',
            unique_together=set([('user', 'activity', 'context')]),
        ),
        migrations.AlterUniqueTogether(
            name='gradingmethod',
            unique_together=set([('name', 'owner')]),
        ),
        migrations.AlterUniqueTogether(
            name='friendshipstatus',
            unique_together=set([('owner', 'other')]),
        ),
        migrations.AddField(
            model_name='codecarouselactivity',
            name='language',
            field=models.ForeignKey(help_text='Chooses the programming language for the activity', on_delete=django.db.models.deletion.PROTECT, related_name='sync_code_activities', to='cs_core.ProgrammingLanguage'),
        ),
    ]
